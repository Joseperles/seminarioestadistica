

Statistical  Econometric using R
========================================================
author: Jose F. Perles Ribes
date: july 2015
width: 1500
height: 900

What is R?
========================================================


- R is a language and environment for statistical computing and graphics.
- Developed by John Chambers and colleagues. R can be considered as a different implementation of S
- R provides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, .) and graphical techniques, and is highly extensible. 
- R is free


R in Statistics Econometrics Applications
========================================================


- There are many R packages done by contributors
- An IDE like R-Studio is highly reccommended
- R provides a high quality graphical capabilities through packages as ggplot or lattice that outperforms commercial econometric software.

R in this course
========================================================


- Load data and packages
- Exploratory statistics and graphs
- NHST.
- Correlation and Regression



Loading data
========================================================

```{r}
Datos <- read.csv("~/GitHub/seminarioestadistica/Datos.csv")
#Exploring file
class(Datos)
dim(Datos)

```

Variables
========================================================

```{r}
str(Datos)

```

Exploring data
========================================================

```{r}

head(Datos)

```

Basic Plot
========================================================

```{r}
hist(Datos$Pob)
```


Basic Plot more details
========================================================

```{r}
hist(Datos$Pob, breaks=50, main="Population histogram", xlab="Population", ylab="frequencies")
```

Basic Plot more details
========================================================


```{r, fig.width = 20, fig.height = 10}
par(mfrow=c(1,3))
hist(Datos$Sup)
hist(Datos$Acomin)
hist(Datos$Acomin, breaks=50)
```


Basic Plot more details (without code)
========================================================


```{r, echo=F, fig.width = 20, fig.height = 12}
par(mfrow=c(1,3))
hist(Datos$Sup)
hist(Datos$Acomin)
hist(Datos$Acomin, breaks=50)
```

Basic Box Plot
========================================================


```{r, fig.width = 20, fig.height = 10}
par(mfrow=c(1,3))
boxplot(Datos$Pob)
boxplot(Datos$Sup)
boxplot(Datos$Acomin)
```

Create new variable
========================================================


```{r, fig.width = 20, fig.height = 10}
par(mfrow=c(1,1))
hist(Datos$porvpal)
```

Create new variable
========================================================

```{r}
Datos$residential[Datos$porvpal<50]<- "residential"
Datos$residential[Datos$porvpal>=50]<- "holiday"
head(Datos$residential)
Datos$IDC<-(Datos$Acomin / Datos$Pob)*1000
head(Datos$IDC)
```

Basic boxplot by group
========================================================


```{r, fig.width = 20, fig.height = 10}
par(mfrow=c(1,2))
boxplot(Datos$Pob~Datos$residential, data=Datos)
boxplot(Datos$IDC~Datos$residential, data=Datos)
```

Split data
========================================================

```{r}
residential<-subset(Datos, Datos$residential=="residential")
holiday<-subset(Datos, Datos$residential=="holiday")
```

Histrogram by group
========================================================


```{r, fig.width = 20, fig.height = 10}
par(mfrow=c(2,2))
hist(residential$IDC)
hist(holiday$IDC)
plot(density(residential$IDC), main="Residential")
plot(density(holiday$IDC), main="Holiday")
```


Better graphs using ggplot2
========================================================


```{r, fig.width = 20, fig.height = 10}
library(ggplot2)
ggplot(data=Datos)+geom_histogram(aes(x=IDC))
```

Better graphs using ggplot2
========================================================


```{r, fig.width = 20, fig.height = 10}
ggplot(data=Datos, aes(x=IDC))+geom_histogram()+facet_wrap(~residential)
```

Better graphs using ggplot2
========================================================


```{r, fig.width = 20, fig.height = 10}
ggplot(data=Datos, aes(y=IDC, x=residential))+geom_violin()
```


Descriptive statistics via psych package
========================================================

```{r}
library(psych)
describe(Datos)

```


Descriptive statistics via psych package
========================================================

```{r}
library(psych)
describe(Datos$IDC)

```


Descriptive statistics via psych package
========================================================

```{r}
library(psych)
describeBy(x=Datos$IDC, group=Datos$residential)

```


Descriptive statistics via psych package
========================================================

```{r}
library(psych)
describeBy(x=Datos$IDC, group=Datos$residential)

```


Descriptive statistics via plyr package
========================================================

```{r}
library(plyr)
aggregate(IDC~residential, Datos, FUN=function(x) c(mean=mean(x), var=var(x)))

```

Descriptive statistics via plyr package
========================================================

```{r}
aggregate(IDC~residential+Nivec04, Datos, FUN=function(x) c(mean=mean(x), var=var(x)))

```


NHST one sample two sided
========================================================

```{r}
t.test(Datos$IDC, alternative="two.sided", mu=20)

```


NHST one sample one sided
========================================================

```{r}
t.test(Datos$IDC, alternative="greater", mu=27)

```

NHST two sample (check for normality)
========================================================

```{r}
#two sample t.test residential versus holiday
aggregate(IDC~residential, Datos, FUN=function(x) c(mean=mean(x), var=var(x))) #evaluate variance
shapiro.test(Datos$IDC) #evaluate normality

```

NHST two sample 
========================================================

```{r}
shapiro.test(Datos$IDC[Datos$residential=="residential"]) 

```

NHST two sample 
========================================================

```{r}
shapiro.test(Datos$IDC[Datos$residential=="holiday"])

```

NHST two sample (testing equality variance)
========================================================

```{r}
ansari.test(IDC~residential, Datos)

```

NHST two sample t.test
========================================================

```{r}
t.test(IDC~residential, data=Datos, var.equal=TRUE)

```


Plotting the confidence interval
========================================================

```{r}
IDCsummary<-ddply(Datos, "residential", summarize,
                  IDC.mean=mean(IDC), IDC.sd=sd(IDC),
                  Lower=IDC.mean-2*IDC.sd/sqrt(NROW(Datos)),
                  Upper=IDC.mean+2*IDC.sd/sqrt(NROW(Datos)))

IDCsummary

```

Plotting the confidence interval
========================================================

```{r, fig.width = 20, fig.height = 10}
ggplot(IDCsummary, aes(x=IDC.mean, y=residential))+geom_point()+geom_errorbarh(aes(xmin=Lower, xmax=Upper), height=.2)

```


ANOVA
========================================================

```{r, fig.width = 20, fig.height = 10}
par(mfrow=c(1,1))
boxplot(Datos$IDC~Datos$Nivec04)

```


ANOVA
========================================================

```{r, fig.width = 20, fig.height = 10}
Datos$Nivec04<-as.factor(as.character(Datos$Nivec04))
ggplot(Datos, aes(y=IDC, x=Nivec04))+geom_boxplot()

```


ANOVA
========================================================

```{r}
IDCanova<-aov(IDC~Nivec04 -1, Datos)  #without intercept
summary(IDCanova)

```


ANOVA
========================================================

```{r}
IDCanova.intercept<-aov(IDC~Nivec04, Datos)
summary(IDCanova.intercept)

```


Linear regression
========================================================

```{r, fig.width = 20, fig.height = 10}
ggplot(Datos, aes(x=Pob, y=Acomin))+geom_point()+geom_smooth(method="lm")+labs(x="Population", y="Retail")

```


Linear regression
========================================================

```{r, fig.width = 20, fig.height = 10}
ggplot(Datos, aes(x=Pob, y=IDC))+geom_point()+geom_smooth(method="lm")+labs(x="Population", y="Retail Density")

```


Variable transformation logs
========================================================

```{r}
Datos$LIDC<-log(Datos$IDC)
Datos$LPob<-log(Datos$Pob)

```



Linear regression 
========================================================

```{r, fig.width = 20, fig.height = 10}
ggplot(Datos, aes(x=LPob, y=LIDC))+geom_point()+geom_smooth(method="lm")+labs(x="Population", y="Log Retail Density")

```


Linear regression colour by group
========================================================

```{r, fig.width = 20, fig.height = 10}
ggplot(Datos, aes(x=LPob, y=LIDC, color=residential)) + geom_point(shape=1)

```

Linear regression colour by group
========================================================

```{r, fig.width = 20, fig.height = 10}
ggplot(Datos, aes(x=LPob, y=LIDC, color=residential)) +
  geom_point(shape=1) +
  scale_colour_hue(l=50) + # Use a slightly darker palette than normal
  geom_smooth(method=lm,   # Add linear regression lines
              se=FALSE)    # Don't add shaded confidence region
```


Linear regression shape by group
========================================================

```{r, fig.width = 20, fig.height = 10}
# Set shape by cond
ggplot(Datos, aes(x=LPob, y=LIDC, shape=residential)) + geom_point()
```

Linear regression shape by group
========================================================

```{r, fig.width = 20, fig.height = 10}
# Same, but with different shapes
ggplot(Datos, aes(x=LPob, y=LIDC, shape=residential)) + geom_point() +
  scale_shape_manual(values=c(1,2))  # Use a hollow circle and triangle
```


========================================================

```{r}
LIDClm<-lm(LIDC~LPob, data=Datos)
summary(LIDClm)
```



========================================================

```{r}
Extended.LIDClm<-lm(LIDC~LPob+residential+Nivec04+Sup, data=Datos)
summary(Extended.LIDClm)
```


========================================================

```{r, fig.width = 20, fig.height = 10}
library(coefplot)
coefplot(LIDClm)
```



========================================================

```{r, fig.width = 20, fig.height = 10}
coefplot(Extended.LIDClm)
```


AIC and BIC
========================================================

```{r}
AIC(LIDClm, Extended.LIDClm)
BIC(LIDClm, Extended.LIDClm)
```

Cross validation
========================================================

```{r}
LIDCglm<-glm(LIDC~LPob, data=Datos, family=gaussian(link="identity"))
summary(LIDCglm)
```

Cross validation
========================================================

```{r}
Extended.LIDCglm<-glm(LIDC~LPob+residential+Nivec04+Sup, data=Datos, family=gaussian(link="identity"))
summary(Extended.LIDCglm)
```


Cross validation
========================================================

```{r}
library(boot)
LIDCglmCV<-cv.glm(Datos,LIDCglm,K=5)
Extended.LIDCglmCV<-cv.glm(Datos,Extended.LIDCglm,K=5)
cvResults<-as.data.frame(rbind(LIDCglmCV$delta,Extended.LIDCglmCV$delta))
names(cvResults)<-c("Error", "Adjusted.Error")
cvResults
```


Robust standard errors via sandwich
========================================================

```{r}
#Robust standard error via sandwich.
library(car)
library(lmtest)
library(sandwich)
library(boot)
robust.Extended.LIDClm<-lm(LIDC~LPob+residential+Nivec04+Sup, data=Datos)
sandwich(robust.Extended.LIDClm)
coeftest(robust.Extended.LIDClm, vcov=vcovHC(robust.Extended.LIDClm,type="HC1"))
```


Robust standard errors 
========================================================

```{r}
coeftest(robust.Extended.LIDClm, vcov=vcovHC(robust.Extended.LIDClm,type="HC1"))
```


Robust standard errors via bootstrap
========================================================

```{r}
set.seed(123)
boot.Extended.LIDClm<-Boot(Extended.LIDClm,f=coef,labels=names(coef(Extended.LIDClm)), R=999, method=c("case"))
summary(boot.Extended.LIDClm)
```

Robust standard errors via bootstrap
========================================================

```{r}
boot.ci(boot.out=boot.Extended.LIDClm, type="bca", index=2) 

```



Robust standard errors via bootstrap
========================================================

```{r}
boot.ci(boot.out=boot.Extended.LIDClm, type="bca", index=3) 

```


